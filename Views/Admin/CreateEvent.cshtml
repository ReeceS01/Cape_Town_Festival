@using Cape_Town_Festival.Models
@model EventViewModel

@{
    ViewData["Title"] = "Create Event";
    ViewData["HideFooter"] = true;
}

<div class="container mt-4">
    <h2 class="text-center mb-4">Create New Event</h2>

    <!-- Event Image Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="card-title">Event Image</h3>
        </div>
        <div class="card-body text-center">
            <img id="eventImagePreview" src="#" alt="Event Image Preview" class="event-image mb-3" style="max-width: 300px; display: none;" />
            <div>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#imageModal">
                    üñºÔ∏è Upload Image
                </button>
            </div>
        </div>
    </div>

    <!-- Event Details Form -->
    <form id="createEventForm" asp-action="CreateEventPost" asp-controller="Admin" method="post">
        <input type="hidden" asp-for="EventImageURL" id="hiddenImageURL" />

        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Event Details</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label>Event Name:</label>
                    <input type="text" asp-for="EventName" class="form-control" required />
                </div>

                <div class="mb-3">
                    <label>Category:</label>
                    <select asp-for="EventCategory" class="form-control">
                        <option value="Music">Music</option>
                        <option value="Culinary">Culinary</option>
                        <option value="Art">Art</option>
                        <option value="Entertainment">Entertainment</option>
                        <option value="Family">Family</option>
                        <option value="Sport">Sport</option>
                        <option value="Community">Community</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label>Description:</label>
                    <textarea asp-for="EventDescription" class="form-control" required></textarea>
                </div>

                <div class="mb-3">
                    <label>Location:</label>
                    <input type="text" asp-for="EventLocation" class="form-control" required />
                </div>

                <div class="mb-3">
                    <label>Coordinates (Latitude/Longitude):</label>
                    <div class="row">
                        <div class="col-md-6">
                            <input type="number" asp-for="EventLatLong.Latitude" id="latitude" class="form-control" placeholder="Latitude" step="0.000001" required />
                        </div>
                        <div class="col-md-6">
                            <input type="number" asp-for="EventLatLong.Longitude" id="longitude" class="form-control" placeholder="Longitude" step="0.000001" required />
                        </div>
                    </div>
                    <small class="text-muted">Enter coordinates for Cape Town area (e.g., -33.9212, 18.4183)</small>
                </div>

                <div class="mb-3">
                    <label>Max Attendees:</label>
                    <input type="number" asp-for="EventMaxAttendees" class="form-control" required min="1" />
                </div>

                <div class="mb-3">
                    <label>Ratings:</label>
                    <input type="number" asp-for="EventRatings" class="form-control" step="0.1" min="0" max="5" required />
                </div>

                <div class="mb-3">
                    <label>Event Date:</label>
                    <input type="datetime-local" id="EventDate" class="form-control" required placeholder="Select a date" />
                </div>

                <div class="mb-3">
                    <label>Status:</label>
                    <select asp-for="Status" id="eventStatus" class="form-control" required>
                        <option value="Online">Online</option>
                        <option value="Deleted">Deleted</option>
                    </select>
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success">üíæ Create Event</button>
                <a href="@Url.Action("AdminEventManagement", "Admin")" class="btn btn-secondary">Cancel</a>
            </div>
        </div>
    </form>
</div>

<!-- Image Upload Modal -->
<div class="modal fade" id="imageModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upload Event Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="imageUploadForm" asp-action="UploadEventImage" asp-controller="Admin" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Image:</label>
                        <input type="file" id="eventImageUpload" name="eventImage" accept="image/*" class="form-control" required />
                    </div>
                    <div id="imagePreviewContainer" class="text-center" style="display: none;">
                        <img id="modalImagePreview" src="#" alt="Preview" style="max-width: 100%; margin-top: 10px;" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Upload Image</button>
                </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Set minimum date to today
            const dateInput = document.getElementById('EventDate');
            const now = new Date();
            const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000);
            dateInput.min = localDateTime.toISOString().slice(0, 16);
            

            const form = document.getElementById('createEventForm');
            
            form.addEventListener('submit', function(e) {
                e.preventDefault();

                // Basic validation
                let eventName = document.getElementById("EventName").value.trim();
                let eventDate = document.getElementById("EventDate").value;
                let eventLocation = document.getElementById("EventLocation").value.trim();

                if (!eventName || !eventDate || !eventLocation) {
                    alert("‚ö†Ô∏è Please fill in all required fields.");
                    return;
                }

                // Get and validate coordinates
                const latitudeInput = document.getElementById("latitude");
                const longitudeInput = document.getElementById("longitude");

                if (!latitudeInput || !longitudeInput) {
                    alert("‚ö†Ô∏è Latitude and Longitude fields are missing.");
                    return;
                }

                const latitude = latitudeInput.value.trim();
                const longitude = longitudeInput.value.trim();

                if (!latitude || !longitude) {
                    alert("‚ö†Ô∏è Please enter valid latitude and longitude values.");
                    return;
                }

                console.log('üìå Submitting coordinates:', { latitude, longitude });

                // Create FormData and explicitly add coordinates
                const formData = new FormData(form);
                formData.append('latitude', latitude);
                formData.append('longitude', longitude);
                formData.append('EventDate', new Date(eventDate).toISOString());

                // Log all form data
                console.log("üìå Form Data Before Submission:");
                for (let pair of formData.entries()) {
                    console.log(`${pair[0]}: ${pair[1]}`);
                }

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    console.log('üìå Server response:', data);
                    if (data.success) {
                        alert("‚úÖ Event created successfully!");
                        setTimeout(() => {
                            window.location.href = '/Admin/AdminEventManagement';
                        }, 1500);
                    } else {
                        alert("‚ùå Failed to create event: " + (data.message || "Unknown error"));
                    }
                })
                .catch(error => {
                    console.error('‚ùå Error:', error);
                    alert("An error occurred while creating the event.");
                });
            });

            // Image preview handling
            const imageInput = document.getElementById("eventImageUpload");
            const modalPreview = document.getElementById("modalImagePreview");
            const previewContainer = document.getElementById("imagePreviewContainer");
            const mainPreview = document.getElementById("eventImagePreview");

            imageInput?.addEventListener('change', function (event) {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        modalPreview.src = e.target.result;
                        previewContainer.style.display = 'block';
                        mainPreview.src = e.target.result;
                        mainPreview.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Handle image upload form
            const imageForm = document.getElementById('imageUploadForm');
            imageForm?.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(imageForm);
                
                fetch(imageForm.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('hiddenImageURL').value = data.imageUrl;
                        document.getElementById('eventImagePreview').src = data.imageUrl;
                        $('.modal').modal('hide');
                    } else {
                        alert("‚ùå Failed to upload image: " + (data.message || "Unknown error"));
                    }
                })
                .catch(error => {
                    console.error('‚ùå Error:', error);
                    alert("An error occurred while uploading the image.");
                });
            });
        });
    </script>
}